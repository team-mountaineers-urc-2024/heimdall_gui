# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'launch_selector.ui'
#
# Created by: PyQt5 UI code generator 5.15.10
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.



# Changes have been made to this file, bw careful when regenerating

import subprocess
from PyQt5 import QtCore, QtGui, QtWidgets
import os
from os import path
from threading import Thread
import sys
WORKSPACE = "~/workspace-heimdall" if len(sys.argv) == 1 else sys.argv[1]

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(750, 800)
        # MainWindow.setSize(675, 700)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.verticalLayoutWidget = QtWidgets.QWidget(self.centralwidget)
        self.verticalLayoutWidget.setGeometry(QtCore.QRect(30, 30, 700, 700))
        self.verticalLayoutWidget.setObjectName("verticalLayoutWidget")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.verticalLayoutWidget)
        self.verticalLayout.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout.setObjectName("verticalLayout")
        self.verticalLayout.layout().setSizeConstraint
        self.label = QtWidgets.QLabel(self.verticalLayoutWidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(10)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label.sizePolicy().hasHeightForWidth())
        self.label.setSizePolicy(sizePolicy)
        self.centralwidget.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setPointSize(17)
        self.label.setFont(font)
        self.label.setMouseTracking(False)
        self.label.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.label.setAutoFillBackground(False)
        self.label.setStyleSheet("")
        self.label.setWordWrap(True)
        self.label.setObjectName("label")
        self.verticalLayout.addWidget(self.label)
        self.horizontalLayout = QtWidgets.QHBoxLayout()
        self.horizontalLayout.setContentsMargins(-1, 20, -1, 40)
        self.horizontalLayout.setSpacing(0)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.tableWidget = QtWidgets.QTableWidget(self.verticalLayoutWidget)
        self.tableWidget.setMinimumWidth(700)
        self.tableWidget.setObjectName("tableWidget")
        self.tableWidget.setColumnCount(2)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(1, item)
        self.horizontalLayout.addWidget(self.tableWidget)
        self.verticalLayout.addLayout(self.horizontalLayout)
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        spacerItem = QtWidgets.QSpacerItem(20, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_2.addItem(spacerItem)
        self.launchButton = QtWidgets.QPushButton(self.verticalLayoutWidget)
        self.launchButton.setMinimumSize(QtCore.QSize(150, 0))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.launchButton.setFont(font)
        self.launchButton.setObjectName("launchButton")
        self.horizontalLayout_2.addWidget(self.launchButton)
        spacerItem1 = QtWidgets.QSpacerItem(20, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_2.addItem(spacerItem1)
        self.verticalLayout.addLayout(self.horizontalLayout_2)
        MainWindow.setCentralWidget(self.centralwidget)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Mission Select"))
        self.label.setText(_translate("MainWindow", "Select launch file(s) to launch from the list below"))
        item = self.tableWidget.horizontalHeaderItem(0)
        item.setText(_translate("MainWindow", "Launch File"))
        item = self.tableWidget.horizontalHeaderItem(1)
        item.setText(_translate("MainWindow", "Load"))
        __sortingEnabled = self.tableWidget.isSortingEnabled()
        self.tableWidget.setSortingEnabled(False)
        self.tableWidget.setSortingEnabled(__sortingEnabled)
        self.launchButton.setText(_translate("MainWindow", "Launch"))
        
        tableW = self.tableWidget.width()
        self.tableWidget.setColumnWidth(0, int(tableW - tableW / 4))

        self.tableWidget.setColumnWidth(1, int(tableW / 4) - 40)
        
def update_files(filepath: str, ui: Ui_MainWindow):
    if path.exists(filepath):
        files = os.listdir(filepath)

        table = ui.tableWidget
        # Used to keep track of current row
        index = 0

        # Add each file to the table
        for file in files:
            # Check if actually a launch file
            if file.find('launch') != -1:
                table.insertRow(index)
                table.setItem(index, 0, QtWidgets.QTableWidgetItem(file))

                load_button = (QtWidgets.QCheckBox(table))
                load_button.setText("Load")
            
                table.setCellWidget(index, 1, load_button)
                index += 1 

             
    else:
        print(f"{filepath} is not a valid filepath")

def launch(ui: Ui_MainWindow):
    table = ui.tableWidget
    
    for rowNum in range(table.rowCount()):
        checkedCell: QtWidgets.QCheckBox = table.cellWidget(rowNum, 1)
        nameCell = table.item(rowNum, 0)
        if checkedCell.isChecked():
            print(f"Launching {nameCell.text()}....")
            # launchpath = os.path.expanduser(f"{WORKSPACE}/launches/")

            
            scriptpath = os.path.expanduser(f"launch_selector")

            # Not sure exactly how to get this to work
            newthread = Thread(target=lambda: subprocess.run(f"{scriptpath}/launch_script.sh {nameCell.text()} {WORKSPACE}", shell=True))
            newthread.start()
            

if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    launchpath = os.path.expanduser(f"{WORKSPACE}/launches") #input("Please enter a filepath for the files to display: ")
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    
    ui.launchButton.clicked.connect(lambda click, ui=ui: launch(ui))
    
    update_files(launchpath, ui)

    sys.exit(app.exec_())
